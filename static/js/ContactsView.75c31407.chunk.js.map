{"version":3,"sources":["components/ContactsForm/contactsForm.module.css","components/ContactsList/contactsList.module.css","components/Filter/filter.module.css","../node_modules/uuid/dist/esm-browser/rng.js","redux/contacts/contacts-operations.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","components/ContactsForm/ContactsForm.jsx","redux/contacts/contacts-selectors.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","views/ContactsView.js"],"names":["module","exports","getRandomValues","contactsOperations","fetchContacts","dispatch","a","fetchContactsRequest","axios","get","data","fetchContactsSuccess","fetchContactsError","message","addContact","name","number","contact","addContactRequest","post","addContactSuccess","addContactError","deleteContact","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","arguments","length","undefined","toLowerCase","TypeError","v4","options","buf","rnds","random","ContactsForm","state","nameInputId","uuidv4","numberInputId","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","onSubmit","props","reset","this","className","styles","form","htmlFor","name_input","onChange","id","type","pattern","title","required","number_input","Button","variant","add_Btn","Component","connect","getFilter","contacts","filter","getVisibleContacts","createSelector","allContacts","normalizedFilter","includes","loading","contactSelectors","onDelete","contacts_block","contacts_title","map","contact_item","size","button","onClick","contactsActions","target","searchWrap","ContactsView","isLoadingContacts","contactsSelectors"],"mappings":"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","file":"static/js/ContactsView.75c31407.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"contactsForm_form__2v-iC\",\"add_Btn\":\"contactsForm_add_Btn__2YOYD\",\"name_input\":\"contactsForm_name_input__3gjZp\",\"number_input\":\"contactsForm_number_input__4ztsY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"contactsList_name__3OkeU\",\"contacts_block\":\"contactsList_contacts_block__15lQl\",\"contact_item\":\"contactsList_contact_item__1N_G3\",\"contacts_title\":\"contactsList_contacts_title__3Kxou\",\"button\":\"contactsList_button__1C19z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchWrap\":\"filter_searchWrap__3TG7j\",\"title\":\"filter_title__212N-\"};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import axios from 'axios';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n} from './contacts-actions';\n\n// axios.defaults.baseURL = 'http://localhost:4040';\n// axios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\nconst fetchContacts = () => async dispatch => {\n  dispatch(fetchContactsRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error.message));\n  }\n};\n\nconst addContact =\n  ({ name, number }) =>\n  async dispatch => {\n    const contact = { name, number };\n\n    dispatch(addContactRequest());\n\n    try {\n      const { data } = await axios.post('/contacts', contact);\n      dispatch(addContactSuccess(data));\n    } catch (error) {\n      dispatch(addContactError(error.message));\n    }\n  };\n\nconst deleteContact = contactId => async dispatch => {\n  dispatch(deleteContactRequest());\n\n  try {\n    await axios.delete(`/contacts/${contactId}`);\n    dispatch(deleteContactSuccess(contactId));\n  } catch (error) {\n    dispatch(deleteContactError(error.message));\n  }\n};\nconst contactsOperations = { fetchContacts, addContact, deleteContact };\nexport default contactsOperations;\n","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import styles from './contactsForm.module.css';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../redux/contacts/contacts-operations';\nimport Button from 'react-bootstrap/Button';\n\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\n\nclass ContactsForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = uuidv4();\n  numberInputId = uuidv4();\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n    // this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <h2>Phonebook</h2>\n        <div className={styles.form}>\n          <label htmlFor={this.nameInputId} className={styles.name_input}>\n            <span>Name</span>\n            <input\n              onChange={this.handleChange}\n              id={this.nameInputId}\n              type=\"text\"\n              name=\"name\"\n              value={this.state.name}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n            />\n          </label>\n\n          <label htmlFor={this.numberInputId} className={styles.number_input}>\n            <span>Number</span>\n            <input\n              onChange={this.handleChange}\n              id={this.numberInputId}\n              type=\"tel\"\n              name=\"number\"\n              value={this.state.number}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n            />\n            {/* <button type=\"submit\" className={styles.add_Btn}> */}\n            <Button\n              type=\"submit\"\n              variant=\"outline-dark\"\n              className={styles.add_Btn}\n            >\n              Add contact\n            </Button>\n          </label>\n        </div>\n      </form>\n    );\n  }\n}\n\nContactsForm.propTypes = {\n  initialState: PropTypes.object,\n  onSubmit: PropTypes.func,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: value => dispatch(contactsOperations.addContact(value)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactsForm);\n","import {createSelector} from '@reduxjs/toolkit';\n \n const getLoading = state => state.contacts.loading;\n\n\n const getAllContacts = (state) => state.contacts.contacts;\n\n const getFilter = (state) => state.contacts.filter;\n\n// export const getVisibleContacts = state =>{\n//     const filter = getFilter(state);\n//     const allContacts = getAllContacts(state);\n//     const normalizedFilter = filter.toLowerCase();\n\n//     return (allContacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizedFilter)\n//     ));\n// }\n\nexport const getVisibleContacts = createSelector(\n  [getAllContacts, getFilter],\n  (allContacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return allContacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n\nexport default {\n    getLoading,\n    getFilter,\n    // getVisibleContacts,\n\n}\n\n// export const getVisibleContacts = state => {\n//     const filter = getFilter(state);\n//     const allContacts = getAllContacts(state);\n//     const normalizedFilter = filter.toLowerCase();\n//      return allContacts.filter(({ name }) =>\n//        name.toLowerCase().includes(normalizedFilter)\n//      );\n\n// }\n","import styles from './contactsList.module.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../redux/contacts/contacts-operations';\nimport * as contactSelectors from '../../redux/contacts/contacts-selectors';\nimport Button from 'react-bootstrap/Button';\n\nconst ContactsList = ({ contacts, onDelete }) => {\n  return (\n    <div className={styles.contacts_block}>\n      <span className={styles.contacts_title}>Contacts:</span>\n      <ul>\n        {contacts.map(({ name, number, id }) => (\n          <li className={styles.contact_item} key={id}>\n            <span className={styles.name}>{name}</span>\n            <span className={styles.number}>{number}</span>\n            <Button\n              variant=\"outline-danger\"\n              size=\"sm\"\n              className={styles.button}\n              onClick={() => onDelete(id)}\n            >\n              Delete\n            </Button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\nContactsList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n};\n\n// const getVisibleContacts = (allContacts, filter) => {\n//   const normalizedFilter = filter.toLocaleLowerCase();\n\n//   return allContacts.filter(contact =>\n//     contact.name.toLocaleLowerCase().includes(normalizedFilter),\n//   );\n// };\n\n// const mapStateToProps = ({ contacts: { contacts, filter } }) => ({\n//   contacts: getVisibleContacts(contacts, filter),\n// });\n\nconst mapStateToProps = state => ({\n  contacts: contactSelectors.getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDelete: id => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n","import styles from './filter.module.css';\nimport { connect } from 'react-redux';\nimport * as contactsActions from '../../redux/contacts/contacts-actions';\nimport contactSelectors from '../../redux/contacts/contacts-selectors';\nimport PropTypes from 'prop-types';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={styles.searchWrap}>\n    <span className={styles.title}>Find contacts by name:</span>\n    <input type=\"text\" value={value} onChange={onChange} />\n  </label>\n);\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: contactSelectors.getFilter(state),\n});\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(contactsActions.changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ContactsForm from '../components/ContactsForm';\nimport ContactsList from '../components/ContactsList';\nimport Filter from '../components/Filter';\nimport contactsOperations from '../redux/contacts/contacts-operations';\nimport contactsSelectors from '../redux/contacts/contacts-selectors';\nimport '../styles.css';\n// import { v4 as uuidv4 } from 'uuid';\n\nclass ContactsView extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <ContactsForm />\n        {this.props.isLoadingContacts && <h1>Loading...</h1>}\n        <Filter />\n        <ContactsList />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoadingContacts: contactsSelectors.getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);\n"],"sourceRoot":""}